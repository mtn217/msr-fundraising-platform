<?php

function pippin_stripe_process_payment() {
	if(isset($_POST['action']) && $_POST['action'] == 'stripe' && wp_verify_nonce($_POST['stripe_nonce'], 'stripe-nonce')) {

		global $stripe_options;

		// load the stripe libraries
		require_once(STRIPE_BASE_DIR . '/lib/latest/init.php');

		$amount = $_POST['user-amount'];

		// retrieve the token generated by stripe.js
		$token = $_POST['stripeToken'];

		$post_id = $_POST['postID'];

		$email = strip_tags(trim($_POST['email']));

		// check if we are using test mode
		if(isset($stripe_options['test_mode']) && $stripe_options['test_mode']) {
			$secret_key = $stripe_options['test_secret_key'];
		} else {
			$secret_key = $stripe_options['live_secret_key'];
		}

		\Stripe\Stripe::setApiKey($secret_key);

		if(isset($_POST['recurring']) && $_POST['recurring'] == 'recurring') { 
			// process a recurring payment
 			$customer_id = get_user_meta( get_current_user_id(), '_stripe_customer_id', true );
 			if( !$customer_id ) {
				// create a new customer if our current user doesn't have one
				$customer = \Stripe\Customer::create(array(
						'source' => $token,
						'email' => $email
					)
				);

				$customer_id = $customer->id;

				if( is_user_logged_in () ) {
					update_user_meta( get_current_user_id(), '_stripe_customer_id', $customer_id );
				}
			}
 			if( $customer_id ) {
					$transaction = \Stripe\Subscription::create(array(
						'customer' => $customer_id,
						'plan' => 'contributions',
						'quantity' => ($amount / 100),
						'metadata' => array(
							'description' => $post_id)
						)
					);
				}
 
		} else { // process a one-time payment

		// attempt to charge the customer's card
			try {
				if( is_user_logged_in() ) {
					$customer_id = get_user_meta( get_current_user_id(), '_stripe_customer_id', true );
				} else {
					$customer_id = false;
				}

				if( !$customer_id ) {
					// create a new customer if our current user doesn't have one
					$customer = \Stripe\Customer::create(array(
							'source' => $token,
							'email' => $email
						)
					);
 
					$customer_id = $customer->id;
 
					if( is_user_logged_in () ) {
						update_user_meta( get_current_user_id(), '_stripe_customer_id', $customer_id );
					}
				}
				if( $customer_id ) {
					$customer = \Stripe\Customer::retrieve($customer_id);
					// if($customer->source != $token) {
					// 	$customer->source = $token;
					// 	$customer->save();
					// }

					// if($customer->email != $email) {
					// 	$customer->source = $email;
					// 	$customer->save();
					// }

					$transaction = \Stripe\Charge::create(array(
							'amount' => $amount, // amount in cents
							'currency' => 'usd',
							'customer' => $customer_id,
							'description' => $post_id
						)
					);
					
					$transaction_json = $transaction->__toJSON();
					echo $transaction_json;
				}

			} catch (Exception $e) {
				// Stop on failed payment
				wp_die($e);
			}
		}
		exit;
	}
}

add_action('init', 'pippin_stripe_process_payment');